<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.DataLayer.LibraryContext">
            <summary>
            The library context class used to generate the database.
            </summary>
        </member>
        <member name="P:Library.DataLayer.LibraryContext.Librarians">
            <summary>
            Gets or sets or set the Librarians table.
            </summary>
            <value> The librarians. </value>
        </member>
        <member name="P:Library.DataLayer.LibraryContext.Accounts">
            <summary>
            Gets or sets or set the Accounts table.
            </summary>
            <value> The accounts. </value>
        </member>
        <member name="P:Library.DataLayer.LibraryContext.Borrowers">
            <summary>
            Gets or sets or set the Borrowers table.
            </summary>
            <value> The borrowers. </value>
        </member>
        <member name="P:Library.DataLayer.LibraryContext.Authors">
            <summary>
            Gets or sets or set the Authors table.
            </summary>
            <value> The authors. </value>
        </member>
        <member name="P:Library.DataLayer.LibraryContext.Books">
            <summary>
            Gets or sets or set the Books table.
            </summary>
            <value> The books. </value>
        </member>
        <member name="P:Library.DataLayer.LibraryContext.Borrow">
            <summary>
            Gets or sets or set the Borrow table.
            </summary>
            <value> The borrow. </value>
        </member>
        <member name="P:Library.DataLayer.LibraryContext.Domains">
            <summary>
            Gets or sets or set the Domains table.
            </summary>
            <value> The domains. </value>
        </member>
        <member name="P:Library.DataLayer.LibraryContext.Editions">
            <summary>
            Gets or sets or set the Editions table.
            </summary>
            <value> The editions. </value>
        </member>
        <member name="P:Library.DataLayer.LibraryContext.Properties">
            <summary>
            Gets or sets or set the Properties table.
            </summary>
            <value> The properties. </value>
        </member>
        <member name="M:Library.DataLayer.LibraryContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            Method used to configure the options for the context of the database.
            </summary>
            <param name="optionsBuilder"> The optionsBuilder used to configure properties of the server. </param>
        </member>
        <member name="T:Library.DataLayer.Repository.BaseRepository`1">
            <summary>
            Abstract class to be inherited to implement the CRUD operation for an entity.
            </summary>
            <typeparam name="T"> Type of the controller. </typeparam>
        </member>
        <member name="P:Library.DataLayer.Repository.BaseRepository`1.Ctx">
            <summary>
            Gets the CTX.
            </summary>
            <value> The CTX. </value>
        </member>
        <member name="P:Library.DataLayer.Repository.BaseRepository`1.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value> The logger. </value>
        </member>
        <member name="M:Library.DataLayer.Repository.BaseRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.String)">
            <summary>
            Gets the specified filter.
            </summary>
            <param name="filter"> The filter. </param>
            <param name="orderBy"> The order by. </param>
            <param name="includeProperties"> The include properties. </param>
            <returns> IEnumerable of T. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.BaseRepository`1.Insert(`0)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> bool. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.BaseRepository`1.Update(`0)">
            <summary>
            Updates the specified item.
            </summary>
            <param name="item"> The item. </param>
            <returns> bool. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.BaseRepository`1.DeleteById(System.Object)">
            <summary>
            Deletes the specified identifier.
            </summary>
            <param name="id"> The identifier. </param>
            <returns> bool. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.BaseRepository`1.Delete(`0)">
            <summary>
            Deletes the specified entity to delete.
            </summary>
            <param name="entityToDelete"> The entity to delete. </param>
            <returns> bool. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.BaseRepository`1.GetByID(System.Object)">
            <summary>
            Gets the by identifier.
            </summary>
            <param name="id"> The identifier. </param>
            <returns> Object of type T. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.BaseRepository`1.DeleteAllEntitiesFromTable">
            <summary>
            Deletes all entities from table.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> bool. </returns>
        </member>
        <member name="T:Library.DataLayer.Repository.Concretes.AccountRepository">
            <summary>
            The Concretes namespace.
            <seealso cref="T:Library.DataLayer.Repository.Interfaces.IAccountRepository"/>
            </summary>
        </member>
        <member name="T:Library.DataLayer.Repository.Concretes.AuthorRepository">
            <summary>
            Methods for the author controller.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Repository.Concretes.BookRepository">
            <summary>
            Methods for the author controller.
            </summary>
        </member>
        <member name="M:Library.DataLayer.Repository.Concretes.BookRepository.GetDomainsList(Library.DomainLayer.Book)">
            <summary>
            Gets the domains list.
            </summary>
            <param name="book"> The book. </param>
            <returns> List of Domain. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.Concretes.BookRepository.GetBooksWithTheSameTitle(System.String)">
            <summary>
            Gets the books with the same title.
            </summary>
            <param name="title"> The title. </param>
            <returns> IEnumerable of Book. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.Concretes.BookRepository.GetUnavailableBooks(System.Collections.Generic.IEnumerable{Library.DomainLayer.Book})">
            <summary>
            Gets the books with the same title.
            </summary>
            <param name="allBooksWithTheSameName"> The title. </param>
            <returns> IEnumerable of Book. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.Concretes.BookRepository.BookHasCorrectDomains(Library.DomainLayer.Book)">
            <summary>
            Books the has correct domains.
            </summary>
            <param name="book"> The book. </param>
            <returns><c> true </c> if XXXX, <c>false</c> otherwise. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.Concretes.BookRepository.GetDomains(Library.DomainLayer.Domain,System.Collections.Generic.List{Library.DomainLayer.Domain})">
            <summary>
            Gets the domains.
            </summary>
            <param name="domain"> The domain. </param>
            <param name="domains"> The domains. </param>
        </member>
        <member name="M:Library.DataLayer.Repository.Concretes.BookRepository.GetParentDomain(Library.DomainLayer.Domain)">
            <summary>
            Gets the parent domain.
            </summary>
            <param name="domain"> The domain. </param>
            /// <returns> Domain. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.Concretes.BookRepository.CheckIfDomainExists(Library.DomainLayer.Domain,System.Collections.Generic.List{Library.DomainLayer.Domain})">
            <summary>
            Checks if domain exists.
            </summary>
            <param name="domain"> The domain. </param>
            <param name="domains"> The domains. </param>
            <returns><c> true </c> if XXXX, <c>false</c> otherwise. </returns>
        </member>
        <member name="T:Library.DataLayer.Repository.Concretes.BorrowerRepository">
            <summary>
            Methods for the borrower controller.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Repository.Concretes.BorrowRepository">
            <summary>
            Methods for the borrow controller.
            </summary>
        </member>
        <member name="M:Library.DataLayer.Repository.Concretes.BorrowRepository.GetBooksBetweenPastMonthsAndPresent(System.Int32)">
            <summary>
            Gets the books between past months and present.
            </summary>
            <param name="months"> The months. </param>
            <returns> IEnumerable of Borrow. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.Concretes.BorrowRepository.GetFirstBorrowDate(System.Int32)">
            <summary>
            Gets the first borrow date.
            </summary>
            <param name="id"> The identifier. </param>
            <returns> ceva. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.Concretes.BorrowRepository.GetNumberOfBorrowsToday(System.Int32)">
            <summary>
            Gets the number of borrows today.
            </summary>
            <param name="id"> The identifier. </param>
            <returns> ceva. </returns>
        </member>
        <member name="T:Library.DataLayer.Repository.Concretes.DomainRepository">
            <summary>
            DomainRepository class.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Repository.Concretes.EditionRepository">
            <summary>
            The Concretes namespace.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Repository.Concretes.LibrarianRepository">
            <summary>
            Class LibrarianRepository.
            Implements the <see cref="!:BaseRepository&lt;Library.DomainLayer.Person.Librarian&gt;" />.
            Implements the <see cref="T:Library.DataLayer.Repository.Interfaces.ILibrarianRepository" />.
            </summary>
            <seealso cref="!:BaseRepository&lt;Library.DomainLayer.Person.Librarian&gt;" />.
            <seealso cref="T:Library.DataLayer.Repository.Interfaces.ILibrarianRepository" />.
        </member>
        <member name="T:Library.DataLayer.Repository.Concretes.PropertiesRepository">
            <summary>
            Class PropertiesRepository.
            Implements the <see cref="T:Library.DataLayer.Repository.BaseRepository`1" />
            Implements the <see cref="T:Library.DataLayer.Repository.Interfaces.IPropertiesRepository" />.
            </summary>
            <seealso cref="T:Library.DataLayer.Repository.BaseRepository`1" />
            <seealso cref="T:Library.DataLayer.Repository.Interfaces.IPropertiesRepository" />
        </member>
        <member name="M:Library.DataLayer.Repository.Concretes.PropertiesRepository.GetLastProperties">
            <summary>
            Gets the last properties.
            </summary>
            <returns> ceva. </returns>
        </member>
        <member name="T:Library.DataLayer.Repository.Interfaces.IAccountRepository">
            <summary>
            Interface IAccountRepository
            Implements the <see cref="!:IRepository&lt;Library.DomainLayer.Person.Account&gt;" />.
            </summary>
            <seealso cref="!:IRepository&lt;Library.DomainLayer.Person.Account&gt;" />
        </member>
        <member name="T:Library.DataLayer.Repository.Interfaces.IAuthorRepository">
            <summary>
            Interface for the author controller.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Repository.Interfaces.IBookRepository">
            <summary>
            Interface for the book controller.
            </summary>
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IBookRepository.GetParentDomain(Library.DomainLayer.Domain)">
            <summary>
            Gets the parent domain.
            </summary>
            <param name="domain"> The domain. </param>
            <returns> ceva. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IBookRepository.GetDomains(Library.DomainLayer.Domain,System.Collections.Generic.List{Library.DomainLayer.Domain})">
            <summary>
            Gets the domains.
            </summary>
            <param name="domain">The domain.</param>
            <param name="domains">The domains.</param>
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IBookRepository.GetUnavailableBooks(System.Collections.Generic.IEnumerable{Library.DomainLayer.Book})">
            <summary>
            Gets the unavailable books.
            </summary>
            <param name="allBooksWithTheSameName"> Name of all books with the same. </param>
            <returns> ceva. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IBookRepository.GetBooksWithTheSameTitle(System.String)">
            <summary>
            Gets the books with the same title.
            </summary>
            <param name="title"> The title. </param>
            <returns> ceva. </returns>
        </member>
        <member name="T:Library.DataLayer.Repository.Interfaces.IBorrowerRepository">
            <summary>
            Interface for the borrower controller.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Repository.Interfaces.IBorrowRepository">
            <summary>
            Interface for the borrow controller.
            </summary>
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IBorrowRepository.GetFirstBorrowDate(System.Int32)">
            <summary>
            Gets the first borrow date.
            </summary>
            <param name="id"> The identifier. </param>
            <returns> DateTime. </returns>
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IBorrowRepository.GetNumberOfBorrowsToday(System.Int32)">
            <summary>
            Gets the number of borrows today.
            </summary>
            <param name="id"> The identifier. </param>
            /// <returns> Int. </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Library.DataLayer.Repository.Interfaces.IBorrowRepository.GetBooksBetweenPastMonthsAndPresent(System.Int32)" -->
        <member name="T:Library.DataLayer.Repository.Interfaces.IDomainRepository">
            <summary>
            Interface for the domain controller.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Repository.Interfaces.IEditionRepository">
            <summary>
            Interface for the edition controller.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Repository.Interfaces.ILibrarianRepository">
            <summary>
            Interface for the librarian controller.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Repository.Interfaces.IPropertiesRepository">
            <summary>
            Interface IPropertiesRepository
            Implements the <see cref="T:Library.DataLayer.Repository.Interfaces.IRepository`1" />.
            </summary>
            <seealso cref="T:Library.DataLayer.Repository.Interfaces.IRepository`1" />
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IPropertiesRepository.GetLastProperties">
            <summary>
            Gets the last properties.
            </summary>
            <returns> Properties. </returns>
        </member>
        <member name="T:Library.DataLayer.Repository.Interfaces.IRepository`1">
            <summary>
            Interface for the repository.
            </summary>
            <typeparam name="T"> ceva. </typeparam>
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IRepository`1.Insert(`0)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> ceva. </returns>.
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IRepository`1.Update(`0)">
            <summary>
            Updates the specified item.
            </summary>
            <param name="item"> The item. </param>
            <returns> ceva. </returns>.
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IRepository`1.DeleteById(System.Object)">
            <summary>
            Deletes the specified identifier.
            </summary>
            <param name="id"> The identifier. </param>
            <returns> ceva. </returns>.
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IRepository`1.Delete(`0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns> ceva. </returns>.
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IRepository`1.DeleteAllEntitiesFromTable">
            <summary>
            Deletes all entities from table.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns> ceva. </returns>.
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IRepository`1.GetByID(System.Object)">
            <summary>
            Gets the by identifier.
            </summary>
            <param name="id"> The identifier. </param>
            <returns> ceva. </returns>.
        </member>
        <member name="M:Library.DataLayer.Repository.Interfaces.IRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.String)">
            <summary>
            Gets the specified filter.
            </summary>
            <param name="filter"> The filter. </param>
            <param name="orderBy"> The order by. </param>
            <param name="includeProperties"> The include properties. </param>
            <returns> ceva. </returns>.
        </member>
        <member name="T:Library.DataLayer.Validators.AccountValidator">
            <summary>
            Class AccountValidator.
            Implements the <see cref="T:FluentValidation.AbstractValidator`1" />.
            </summary>
            <seealso cref="T:FluentValidation.AbstractValidator`1" />
        </member>
        <member name="M:Library.DataLayer.Validators.AccountValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.DataLayer.Validators.AccountValidator" /> class.
            </summary>
        </member>
        <member name="M:Library.DataLayer.Validators.AccountValidator.DoesNotContainLetters(System.String)">
            <summary>
            Doeses the not contain letters.
            </summary>
            <param name="phoneNumber"> The phone number. </param>
            <returns> bool. </returns>
        </member>
        <member name="T:Library.DataLayer.Validators.AuthorValidator">
            <summary>
            Class AuthorValidator.
            Implements the <see cref="T:FluentValidation.AbstractValidator`1" />.
            </summary>
            <seealso cref="T:FluentValidation.AbstractValidator`1" />
        </member>
        <member name="M:Library.DataLayer.Validators.AuthorValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.DataLayer.Validators.AuthorValidator" /> class.
            </summary>
        </member>
        <member name="M:Library.DataLayer.Validators.AuthorValidator.BeAValidName(System.String)">
            <summary>
            Bes the name of a valid.
            </summary>
            <param name="name"> The name. </param>
            <returns> bool. </returns>
        </member>
        <member name="M:Library.DataLayer.Validators.AuthorValidator.HaveEntities``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Haves the entities.
            </summary>
            <typeparam name="T"> Entities as ICollection of T. </typeparam>
            <param name="entities"> The entities. </param>
            <returns> bool. </returns>
        </member>
        <member name="T:Library.DataLayer.Validators.BookValidators.BookValidator">
            <summary>
            Class BookValidator.
            Implements the <see cref="T:FluentValidation.AbstractValidator`1" />.
            </summary>
            <seealso cref="T:FluentValidation.AbstractValidator`1" />.
        </member>
        <member name="M:Library.DataLayer.Validators.BookValidators.BookValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.DataLayer.Validators.BookValidators.BookValidator" /> class.
            </summary>
        </member>
        <member name="M:Library.DataLayer.Validators.BookValidators.BookValidator.BeAValidName(System.String)">
            <summary>
            Verify if the name is valid.
            </summary>
            <param name="name"> The name. </param>
            <returns> bool. </returns>
        </member>
        <member name="M:Library.DataLayer.Validators.BookValidators.BookValidator.HaveEntities``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Has the entities.
            </summary>
            <typeparam name="T"> Template type. </typeparam>
            <param name="entities"> The entities. </param>
            <returns> bool. </returns>
        </member>
        <member name="T:Library.DataLayer.Validators.BookValidators.BookWithoutAuthorsValidator">
            <summary>
            Class BookWithoutAuthorsValidator.
            Implements the <see cref="T:FluentValidation.AbstractValidator`1" />.
            </summary>
            <seealso cref="T:FluentValidation.AbstractValidator`1" />
        </member>
        <member name="M:Library.DataLayer.Validators.BookValidators.BookWithoutAuthorsValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.DataLayer.Validators.BookValidators.BookWithoutAuthorsValidator"/> class.
            </summary>
        </member>
        <member name="M:Library.DataLayer.Validators.BookValidators.BookWithoutAuthorsValidator.BeAValidName(System.String)">
            <summary>
            Bes the name of a valid.
            </summary>
            <param name="name"> The name. </param>
            <returns> bool. </returns>
        </member>
        <member name="M:Library.DataLayer.Validators.BookValidators.BookWithoutAuthorsValidator.HaveEntities``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Haves the entities.
            </summary>
            <typeparam name="T"> Template type. </typeparam>
            <param name="entities"> The entities. </param>
            <returns> bool. </returns>
        </member>
        <member name="T:Library.DataLayer.Validators.BorrowerValidator">
            <summary>
            Class BorrowerValidator.
            Implements the <see cref="!:AbstractValidator&lt;Library.DomainLayer.Person.Borrower&gt;" />.
            </summary>
            <seealso cref="!:AbstractValidator&lt;Library.DomainLayer.Person.Borrower&gt;" />
        </member>
        <member name="M:Library.DataLayer.Validators.BorrowerValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.DataLayer.Validators.BorrowerValidator" /> class.
            </summary>
        </member>
        <member name="M:Library.DataLayer.Validators.BorrowerValidator.BeAValidName(System.String)">
            <summary>
            Bes the name of a valid.
            </summary>
            <param name="name"> The name. </param>
            <returns> bool. </returns>
        </member>
        <member name="T:Library.DataLayer.Validators.BorrowValidator">
            <summary>
            Class BorrowValidator.
            Implements the <see cref="T:FluentValidation.AbstractValidator`1" />.
            </summary>
            <seealso cref="T:FluentValidation.AbstractValidator`1" />
        </member>
        <member name="M:Library.DataLayer.Validators.BorrowValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.DataLayer.Validators.BorrowValidator" /> class.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Validators.DomainValidators.BaseDomainValidator">
            <summary>
            Class BaseDomainValidator.
            Implements the <see cref="T:FluentValidation.AbstractValidator`1" />.
            </summary>
            <seealso cref="T:FluentValidation.AbstractValidator`1" />
        </member>
        <member name="M:Library.DataLayer.Validators.DomainValidators.BaseDomainValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.DataLayer.Validators.DomainValidators.BaseDomainValidator"/> class.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Validators.DomainValidators.DomainValidator">
            <summary>
            Class DomainValidator.
            Implements the <see cref="T:FluentValidation.AbstractValidator`1" />.
            </summary>
            <seealso cref="T:FluentValidation.AbstractValidator`1" />
        </member>
        <member name="M:Library.DataLayer.Validators.DomainValidators.DomainValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.DataLayer.Validators.DomainValidators.DomainValidator" /> class.
            </summary>
        </member>
        <member name="M:Library.DataLayer.Validators.DomainValidators.DomainValidator.HaveEntities``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Haves the entities.
            </summary>
            <typeparam name="T"> ceva. </typeparam>
            <param name="entities">The entities.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Library.DataLayer.Validators.EditionValidator">
            <summary>
            Class EditionValidator.
            Implements the <see cref="T:FluentValidation.AbstractValidator`1" />.
            </summary>
            <seealso cref="T:FluentValidation.AbstractValidator`1" />
        </member>
        <member name="M:Library.DataLayer.Validators.EditionValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.DataLayer.Validators.EditionValidator" /> class.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Validators.LibrarianValidator">
            <summary>
            Class LibrarianValidator.
            Implements the <see cref="!:AbstractValidator&lt;Library.DomainLayer.Person.Librarian&gt;" />.
            </summary>
            <seealso cref="!:AbstractValidator&lt;Library.DomainLayer.Person.Librarian&gt;" />
        </member>
        <member name="M:Library.DataLayer.Validators.LibrarianValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.DataLayer.Validators.LibrarianValidator" /> class.
            </summary>
        </member>
        <member name="T:Library.DataLayer.Validators.PropertiesValidator">
            <summary>
            Class PropertiesModelValidator.
            Implements the <see cref="T:FluentValidation.AbstractValidator`1" />.
            </summary>
            <seealso cref="T:FluentValidation.AbstractValidator`1" />
        </member>
        <member name="M:Library.DataLayer.Validators.PropertiesValidator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.DataLayer.Validators.PropertiesValidator" /> class.
            </summary>
        </member>
        <member name="T:Library.DomainLayer.Account">
            <summary>
            Class Account.
            </summary>
        </member>
        <member name="P:Library.DomainLayer.Account.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value> The identifier. </value>
        </member>
        <member name="P:Library.DomainLayer.Account.PhoneNumber">
            <summary>
            Gets or sets the phone number.
            </summary>
            <value> The phone number. </value>
        </member>
        <member name="P:Library.DomainLayer.Account.Email">
            <summary>
            Gets or sets the email.
            </summary>
            <value> The email. </value>
        </member>
        <member name="T:Library.DomainLayer.Author">
            <summary>
            Class Author.
            </summary>
        </member>
        <member name="P:Library.DomainLayer.Author.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Library.DomainLayer.Author.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
            <value>The first name.</value>
        </member>
        <member name="P:Library.DomainLayer.Author.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
            <value>The last name.</value>
        </member>
        <member name="T:Library.DomainLayer.Book">
            <summary>
            Class Book.
            </summary>
        </member>
        <member name="P:Library.DomainLayer.Book.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>\
        </member>
        <member name="P:Library.DomainLayer.Book.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Library.DomainLayer.Book.LecturesOnlyBook">
            <summary>
            Gets or sets a value indicating whether this instance is borrowable.
            </summary>
            <value><c>true</c> if this instance is borrowable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Library.DomainLayer.Book.IsBorrowed">
            <summary>
            Gets or sets a value indicating whether this instance is borrowed.
            </summary>
            <value><c>null</c> if [is borrowed] contains no value, <c>true</c> if [is borrowed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Library.DomainLayer.Book.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Library.DomainLayer.Book.Authors">
            <summary>
            Gets or sets the authors.
            </summary>
            <value>The authors.</value>
        </member>
        <member name="P:Library.DomainLayer.Book.Domains">
            <summary>
            Gets or sets the domains.
            </summary>
            <value>The domains.</value>
        </member>
        <member name="P:Library.DomainLayer.Book.Editions">
            <summary>
            Gets or sets the editions.
            </summary>
            <value>The editions.</value>
        </member>
        <member name="T:Library.DomainLayer.Borrow">
            <summary>
            Class Borrow.
            </summary>
        </member>
        <member name="P:Library.DomainLayer.Borrow.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Library.DomainLayer.Borrow.BorrowDate">
            <summary>
            Gets or sets the borrow date.
            </summary>
            <value>The borrow date.</value>
        </member>
        <member name="P:Library.DomainLayer.Borrow.EndDate">
            <summary>
            Gets or sets the end date.
            </summary>
            <value>The end date.</value>
        </member>
        <member name="P:Library.DomainLayer.Borrow.NoOfTimeExtended">
            <summary>
            Gets or sets the no of time extended.
            </summary>
            <value>The no of time extended.</value>
        </member>
        <member name="P:Library.DomainLayer.Borrow.Borrower">
            <summary>
            Gets or sets the borrower.
            </summary>
            <value>The borrower.</value>
        </member>
        <member name="P:Library.DomainLayer.Borrow.Librarian">
            <summary>
            Gets or sets the librarian.
            </summary>
            <value>The librarian.</value>
        </member>
        <member name="P:Library.DomainLayer.Borrow.BorrowedBooks">
            <summary>
            Gets or sets the borrowed books.
            </summary>
            <value>The borrowed books.</value>
        </member>
        <member name="T:Library.DomainLayer.Borrower">
            <summary>
            Class Borrower.
            </summary>
        </member>
        <member name="P:Library.DomainLayer.Borrower.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Library.DomainLayer.Borrower.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
            <value>The last name.</value>
        </member>
        <member name="P:Library.DomainLayer.Borrower.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
            <value>The first name.</value>
        </member>
        <member name="P:Library.DomainLayer.Borrower.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:Library.DomainLayer.Borrower.Account">
            <summary>
            Gets or sets the account.
            </summary>
            <value>The account.</value>
        </member>
        <member name="T:Library.DomainLayer.Domain">
            <summary>
            Class Domain.
            </summary>
        </member>
        <member name="P:Library.DomainLayer.Domain.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Library.DomainLayer.Domain.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Library.DomainLayer.Domain.ParentDomain">
            <summary>
            Gets or sets the parent domain.
            </summary>
            <value>The parent domain.</value>
        </member>
        <member name="P:Library.DomainLayer.Domain.ChildrenDomains">
            <summary>
            Gets or sets the children domains.
            </summary>
            <value>The children domains.</value>
        </member>
        <member name="T:Library.DomainLayer.Edition">
            <summary>
            Class Edition.
            </summary>
        </member>
        <member name="P:Library.DomainLayer.Edition.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Library.DomainLayer.Edition.Publisher">
            <summary>
            Gets or sets the publisher.
            </summary>
            <value>The publisher.</value>
        </member>
        <member name="P:Library.DomainLayer.Edition.Year">
            <summary>
            Gets or sets the year.
            </summary>
            <value>The year.</value>
        </member>
        <member name="P:Library.DomainLayer.Edition.EditionNumber">
            <summary>
            Gets or sets the edition number.
            </summary>
            <value>The edition number.</value>
        </member>
        <member name="P:Library.DomainLayer.Edition.NumberOfPages">
            <summary>
            Gets or sets the number of pages.
            </summary>
            <value>The number of pages.</value>
        </member>
        <member name="T:Library.DomainLayer.Librarian">
            <summary>
            Class Librarian.
            Implements the <see cref="!:DomainLayer.Person.Borrower" />.
            </summary>
            <seealso cref="!:DomainLayer.Person.Borrower" />
        </member>
        <member name="P:Library.DomainLayer.Librarian.IsReader">
            <summary>
            Gets or sets a value indicating whether this instance is reader.
            </summary>
            <value><c>null</c> if [is reader] contains no value, <c>true</c> if [is reader]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Library.DomainLayer.Properties">
            <summary>
            Class Properties.
            </summary>
        </member>
        <member name="P:Library.DomainLayer.Properties.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Library.DomainLayer.Properties.DOMENII">
            <summary>
            Gets or sets the domenii.
            </summary>
            <value>The domenii.</value>
        </member>
        <member name="P:Library.DomainLayer.Properties.NMC">
            <summary>
            Gets or sets the numar maxim carti.
            </summary>
            <value>The numar maxim carti.</value>
        </member>
        <member name="P:Library.DomainLayer.Properties.L">
            <summary>
            Gets or sets the l.
            </summary>
            <value>The l.</value>
        </member>
        <member name="P:Library.DomainLayer.Properties.PER">
            <summary>
            Gets or sets the perioada.
            </summary>
            <value>The perioada.</value>
        </member>
        <member name="P:Library.DomainLayer.Properties.C">
            <summary>
            Gets or sets the nr maxim carti imprumutate.
            </summary>
            <value>The nr maxim carti imprumutate.</value>
        </member>
        <member name="P:Library.DomainLayer.Properties.D">
            <summary>
            Gets or sets the nr maxim carti imprumutate acelasi domeniu.
            </summary>
            <value>The nr maxim carti imprumutate acelasi domeniu.</value>
        </member>
        <member name="P:Library.DomainLayer.Properties.LIM">
            <summary>
            Gets or sets the limita maxima imprumut.
            </summary>
            <value>The limita maxima imprumut.</value>
        </member>
        <member name="P:Library.DomainLayer.Properties.DELTA">
            <summary>
            Gets or sets the delta.
            </summary>
            <value>The delta.</value>
        </member>
        <member name="P:Library.DomainLayer.Properties.NCZ">
            <summary>
            Gets or sets the numar carti imprumutate zilnic.
            </summary>
            <value> The number. </value>
        </member>
        <member name="P:Library.DomainLayer.Properties.PERSIMP">
            <summary>
            Gets or sets the persimp.
            </summary>
            <value>The persimp.</value>
        </member>
        <member name="T:Library.Injection.Bindings">
            <summary>
            Class Bindings.
            Implements the <see cref="T:Ninject.Modules.NinjectModule" />.
            </summary>
            <seealso cref="T:Ninject.Modules.NinjectModule" />
        </member>
        <member name="M:Library.Injection.Bindings.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="M:Library.Injection.Bindings.LoadServicesLayer">
            <summary>
            Loads the services layer.
            </summary>
        </member>
        <member name="M:Library.Injection.Bindings.LoadRepositoryLayer">
            <summary>
            Loads the repository layer.
            </summary>
        </member>
        <member name="T:Library.Injection.Injector">
            <summary>
            Class Injector.
            </summary>
        </member>
        <member name="F:Library.Injection.Injector.kernel">
            <summary>
            The kernel.
            </summary>
        </member>
        <member name="M:Library.Injection.Injector.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:Library.Injection.Injector.Create``1">
            <summary>
            Creates this instance.
            </summary>
            <typeparam name="T"> Template parameter.
            It can be whether a repository interface or a service interface. </typeparam>
            <returns> An instance of a repository or a service. </returns>
        </member>
        <member name="T:Library.ServiceLayer.IServices.IAccountService">
            <summary>
            Interface IAccountService
            Implements the <see cref="!:IBaseService&lt;Library.DomainLayer.Person.Account&gt;"/>.
            </summary>
            <seealso cref="!:IBaseService&lt;Library.DomainLayer.Person.Account&gt;" />
        </member>
        <member name="T:Library.ServiceLayer.IServices.IAuthorService">
            <summary>
            Interface IAuthorService
            Implements the <see cref="T:Library.ServiceLayer.IServices.IBaseService`1" />.
            </summary>
            <seealso cref="T:Library.ServiceLayer.IServices.IBaseService`1" />
        </member>
        <member name="T:Library.ServiceLayer.IServices.IBaseService`1">
            <summary>
            Interface for the repository.
            </summary>
            <typeparam name="T"> Ceva. </typeparam>
        </member>
        <member name="M:Library.ServiceLayer.IServices.IBaseService`1.Insert(`0)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> T. </returns>
        </member>
        <member name="M:Library.ServiceLayer.IServices.IBaseService`1.Update(`0)">
            <summary>
            Updates the specified item.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> T. </returns>
        </member>
        <member name="M:Library.ServiceLayer.IServices.IBaseService`1.DeleteById(System.Object)">
            <summary>
            Deletes the by identifier.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> T. </returns>
        </member>
        <member name="M:Library.ServiceLayer.IServices.IBaseService`1.DeleteAll">
            <summary>
            Deletes all.
            </summary>
            <param name="entity">The entity.</param>
            <returns> ceva. </returns>
        </member>
        <member name="M:Library.ServiceLayer.IServices.IBaseService`1.GetByID(System.Object)">
            <summary>
            Gets the by identifier.
            </summary>
            <param name="id"> The identifier. </param>
            <returns> T. </returns>
        </member>
        <member name="M:Library.ServiceLayer.IServices.IBaseService`1.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.String)">
            <summary>
            Gets the specified filter.
            </summary>
            <param name="filter"> filter. </param>
            <param name="orderBy"> orderBy. </param>
            <param name="includeProperties"> includeProperties. </param>
            <returns> IEnumerable<typeparamref name="T"/>. </returns>
        </member>
        <member name="T:Library.ServiceLayer.IServices.IBookService">
            <summary>
            Interface IBookService
            Implements the <see cref="T:Library.ServiceLayer.IServices.IBaseService`1" />.
            </summary>
            <seealso cref="T:Library.ServiceLayer.IServices.IBaseService`1" />.
        </member>
        <member name="T:Library.ServiceLayer.IServices.IBorrowerService">
            <summary>
            Interface IBorrowerService
            Implements the <see cref="!:IBaseService&lt;Library.DomainLayer.Person.Borrower&gt;" />.
            </summary>
            <seealso cref="!:IBaseService&lt;Library.DomainLayer.Person.Borrower&gt;" />
        </member>
        <member name="T:Library.ServiceLayer.IServices.IBorrowService">
            <summary>
            Interface IBorrowService
            Implements the <see cref="T:Library.ServiceLayer.IServices.IBaseService`1" />.
            </summary>
            <seealso cref="T:Library.ServiceLayer.IServices.IBaseService`1" />
        </member>
        <member name="M:Library.ServiceLayer.IServices.IBorrowService.CheckIfBooksAreBorrowable(Library.DomainLayer.Borrow)">
            <summary>
            Checks if books are borrowable.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Library.ServiceLayer.IServices.IBorrowService.CheckMaxBorrowBooksToday">
            <summary>
            Checks the maximum borrow books today.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Library.ServiceLayer.IServices.IBorrowService.CheckCanBorrowMaxNMCInPER(Library.DomainLayer.Borrow)">
            <summary>
            Checks the can borrow maximum NMC in per.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Library.ServiceLayer.IServices.IBorrowService.CheckBorrowInDELTATime(Library.DomainLayer.Borrow)">
            <summary>
            Checks the borrow in delta time.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Library.ServiceLayer.IServices.IBorrowService.CheckBorrowedBooksForMaxCBooks(Library.DomainLayer.Borrow)">
            <summary>
            Checks the borrowed books for maximum c books.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Library.ServiceLayer.IServices.IDomainService">
            <summary>
            Interface IDomainService
            Implements the <see cref="T:Library.ServiceLayer.IServices.IBaseService`1" />.
            </summary>
            <seealso cref="T:Library.ServiceLayer.IServices.IBaseService`1" />
        </member>
        <member name="T:Library.ServiceLayer.IServices.IEditionService">
            <summary>
            Interface IEditionService
            Implements the <see cref="T:Library.ServiceLayer.IServices.IBaseService`1" />.
            </summary>
            <seealso cref="T:Library.ServiceLayer.IServices.IBaseService`1" />
        </member>
        <member name="T:Library.ServiceLayer.IServices.ILibrarianService">
            <summary>
            Interface ILibrarianService
            Implements the <see cref="!:IBaseService&lt;Library.DomainLayer.Person.Librarian&gt;" />.
            </summary>
            <seealso cref="!:IBaseService&lt;Library.DomainLayer.Person.Librarian&gt;" />
        </member>
        <member name="T:Library.ServiceLayer.IServices.IPropertiesService">
            <summary>
            Interface IPropertiesService
            Implements the <see cref="T:Library.ServiceLayer.IServices.IBaseService`1" />.
            </summary>
            <seealso cref="T:Library.ServiceLayer.IServices.IBaseService`1" />
        </member>
        <member name="T:Library.ServiceLayer.Services.AccountService">
            <summary>
            Class AccountService.
            Implements the <see cref="!:Library.ServiceLayer.Services.BaseService&lt;Library.DomainLayer.Person.Account, IAccountRepository&gt;" />
            Implements the <see cref="T:Library.ServiceLayer.IServices.IAccountService" />.
            </summary>
            <seealso cref="!:Library.ServiceLayer.Services.BaseService&lt;Library.DomainLayer.Person.Account, IAccountRepository&gt;" />
            <seealso cref="T:Library.ServiceLayer.IServices.IAccountService" />
        </member>
        <member name="M:Library.ServiceLayer.Services.AccountService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.ServiceLayer.Services.AccountService" /> class.
            </summary>
        </member>
        <member name="T:Library.ServiceLayer.Services.AuthorService">
            <summary>
            Class AuthorService.
            Implements the <see cref="!:Library.ServiceLayer.Services.BaseService&lt;Author, IAuthorRepository&gt;" />
            Implements the <see cref="T:Library.ServiceLayer.IServices.IAuthorService" />.
            </summary>
            <seealso cref="!:Library.ServiceLayer.Services.BaseService&lt;Author, IAuthorRepository&gt;" />
            <seealso cref="T:Library.ServiceLayer.IServices.IAuthorService" />
        </member>
        <member name="M:Library.ServiceLayer.Services.AuthorService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.ServiceLayer.Services.AuthorService" /> class.
            </summary>
        </member>
        <member name="T:Library.ServiceLayer.Services.BaseService`3">
            <summary>
            Class BaseService.
            Implements the <see cref="T:Library.ServiceLayer.IServices.IBaseService`1" />.
            </summary>
            <typeparam name="TModel"> Reference type. </typeparam>
            <typeparam name="TRepository"> Implements IRepository of TModel. </typeparam>
            <typeparam name="TPropRepository"> Implements IPropertiesRepository. </typeparam>
            <seealso cref="T:Library.ServiceLayer.IServices.IBaseService`1" />
        </member>
        <member name="M:Library.ServiceLayer.Services.BaseService`3.#ctor(`1,`2)">
            <summary>
            Initializes a new instance of the <see cref="T:Library.ServiceLayer.Services.BaseService`3"/> class.
            </summary>
            <param name="repository"> The repository. </param>
            <param name="propRepo"> The property repo. </param>
        </member>
        <member name="P:Library.ServiceLayer.Services.BaseService`3.Repository">
            <summary>
            Gets or sets the repository.
            </summary>
            <value> The repository. </value>
        </member>
        <member name="P:Library.ServiceLayer.Services.BaseService`3.Validator">
            <summary>
            Gets or sets the validator.
            </summary>
            <value> The validator. </value>
        </member>
        <member name="P:Library.ServiceLayer.Services.BaseService`3.PropertiesRepository">
            <summary>
            Gets or sets the properties repository.
            </summary>
            <value> The properties repository. </value>
        </member>
        <member name="M:Library.ServiceLayer.Services.BaseService`3.Insert(`0)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> None. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BaseService`3.Update(`0)">
            <summary>
            Updates the specified item.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> bool. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BaseService`3.DeleteById(System.Object)">
            <summary>
            Deletes the by identifier.
            </summary>
            <param name="id"> The identifier. </param>
            <returns> bool. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BaseService`3.GetByID(System.Object)">
            <summary>
            Gets the by identifier.
            </summary>
            <param name="id"> The identifier. </param>
            <returns> TModel. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BaseService`3.GetAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{System.Linq.IQueryable{`0},System.Linq.IOrderedQueryable{`0}},System.String)">
            <summary>
            Gets all.
            </summary>
            /// <param name="filter"> The filter. </param>
            <param name="orderBy"> The order by. </param>
            <param name="includeProperties"> The include properties. </param>
            <returns> IEnumerable of TModel. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BaseService`3.DeleteAll">
            <summary>
            Deletes all.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> bool. </returns>
        </member>
        <member name="T:Library.ServiceLayer.Services.BookService">
            <summary>
            Class BookService.
            Implements the <see cref="!:Library.ServiceLayer.Services.BaseService&lt;Book, IBookRepository&gt;" />
            Implements the <see cref="T:Library.ServiceLayer.IServices.IBookService" />.
            </summary>
            <seealso cref="!:Library.ServiceLayer.Services.BaseService&lt;Book, IBookRepository&gt;" />
            <seealso cref="T:Library.ServiceLayer.IServices.IBookService" />
        </member>
        <member name="M:Library.ServiceLayer.Services.BookService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.ServiceLayer.Services.BookService" /> class.
            </summary>
        </member>
        <member name="M:Library.ServiceLayer.Services.BookService.Insert(Library.DomainLayer.Book)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> bool. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BookService.BookHasCorrectDomains(Library.DomainLayer.Book)">
            <summary>
             Se va verifica faptul ca o carte nu poate sa se specifice explicit
             ca fiind din domenii aflate in relatia stramos-descendent.
            The books has correct domains.
            </summary>
            <param name="book"> The book. </param>
            <returns> bool. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BookService.AddAncestorDomains(Library.DomainLayer.Book)">
            <summary>
            Daca o carte face parte dintr-un subdomeniu, automat va fi regasita si ca facand parte
            din domeniile stramos, fara ca acest lucru sa fie declarat explicit in incadrarea initiala a cartii
            Adds the ancestor domains.
            </summary>
            <param name="book"> The book. </param>
        </member>
        <member name="M:Library.ServiceLayer.Services.BookService.GetDomainsList(Library.DomainLayer.Book)">
            <summary>
            Gets the domains list.
            </summary>
            <param name="book"> The book. </param>
            <returns> List of Domain. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BookService.GetDomainsWithoutTheFirst(Library.DomainLayer.Domain,System.Collections.Generic.List{Library.DomainLayer.Domain})">
            <summary>
            Gets the domains without the first.
            </summary>
            <param name="domain"> The domain. </param>
            <param name="domains"> The domains. </param>
        </member>
        <member name="M:Library.ServiceLayer.Services.BookService.GetDomainsWithTheFirst(Library.DomainLayer.Domain,System.Collections.Generic.List{Library.DomainLayer.Domain})">
            <summary>
            Gets the domains with the first.
            </summary>
            <param name="domain"> The domain. </param>
            <param name="domains"> The domains. </param>
        </member>
        <member name="M:Library.ServiceLayer.Services.BookService.CheckFlags(Library.DomainLayer.Book)">
            <summary>
            Checks the flags.
            </summary>
            <param name="book"> The book. </param>
        </member>
        <member name="T:Library.ServiceLayer.Services.BorrowerService">
            <summary>
            Class BorrowerService.
            Implements the <see cref="!:Library.ServiceLayer.Services.BaseService&lt;Library.DomainLayer.Person.Borrower, IBorrowerRepository&gt;" />
            Implements the <see cref="T:Library.ServiceLayer.IServices.IBorrowerService" />.
            </summary>
            <seealso cref="!:Library.ServiceLayer.Services.BaseService&lt;Library.DomainLayer.Person.Borrower, IBorrowerRepository&gt;" />
            <seealso cref="T:Library.ServiceLayer.IServices.IBorrowerService" />
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.ServiceLayer.Services.BorrowerService" /> class.
            </summary>
        </member>
        <member name="T:Library.ServiceLayer.Services.BorrowService">
            <summary>
            Class BorrowService.
            Implements the <see cref="!:Library.ServiceLayer.Services.BaseService&lt;Borrow, IBorrowRepository&gt;" />
            Implements the <see cref="T:Library.ServiceLayer.IServices.IBorrowService" />.
            </summary>
            <seealso cref="!:Library.ServiceLayer.Services.BaseService&lt;Borrow, IBorrowRepository&gt;" />
            <seealso cref="T:Library.ServiceLayer.IServices.IBorrowService" />
        </member>
        <member name="F:Library.ServiceLayer.Services.BorrowService.bookRepository">
            <summary>
            Initializes a new instance of the <see cref="T:Library.ServiceLayer.Services.BorrowService" /> class.
            </summary>
            <param name="borrowRepository">The borrow repository.</param>
            <param name="propertiesRepository">The properties repository.</param>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.ServiceLayer.Services.BorrowService" /> class.
            </summary>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.GetParentDomain(Library.DomainLayer.Domain)">
            <summary>
            Gets the parent domain.
            </summary>
            <param name="domain">The domain.</param>
            <returns>Domain.</returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.GetNoOfDistinctCategories(System.Collections.Generic.ICollection{Library.DomainLayer.Domain})">
            <summary>
            Gets the no of distinct categories.
            </summary>
            <param name="domains">The domains.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.Insert(Library.DomainLayer.Borrow)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> ceva. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.CheckBorrowedBooksForMaxCBooks(Library.DomainLayer.Borrow)">
            <summary>
            Checks the borrowed books for maximum c books.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.CheckBorrowInDELTATime(Library.DomainLayer.Borrow)">
            <summary>
            Checks the borrow in delta time.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.CheckCanBorrowMaxNMCInPER(Library.DomainLayer.Borrow)">
            <summary>
            Checks the can borrow maximum NMC in per.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.CheckMaxBorrowBooksToday">
            <summary>
            Checks the maximum borrow books today.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.CheckIfBooksAreBorrowable(Library.DomainLayer.Borrow)">
            <summary>
            Checks if books are borrowable.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.CheckLIM(Library.DomainLayer.Borrow)">
            <summary>
            Checks the lim.
            </summary>
            <param name="entity"> entity.</param>
            <returns> vrbs. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.CanBorrowBook(System.String)">
            <summary>
            Determines whether this instance [can borrow book] the specified title.
            </summary>
            <param name="title">The title.</param>
            <returns><c>true</c> if this instance [can borrow book] the specified title; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.BorrowService.CheckFlags(Library.DomainLayer.Borrow)">
            <summary>
            Checks the flags.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Library.ServiceLayer.Services.DomainService">
            <summary>
            Class DomainService.
            Implements the <see cref="!:Library.ServiceLayer.Services.BaseService&lt;Domain, IDomainRepository&gt;" />
            Implements the <see cref="T:Library.ServiceLayer.IServices.IDomainService" />.
            </summary>
            <seealso cref="!:Library.ServiceLayer.Services.BaseService&lt;Domain, IDomainRepository&gt;" />
            <seealso cref="T:Library.ServiceLayer.IServices.IDomainService" />
        </member>
        <member name="M:Library.ServiceLayer.Services.DomainService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.ServiceLayer.Services.DomainService" /> class.
            </summary>
        </member>
        <member name="M:Library.ServiceLayer.Services.DomainService.Insert(Library.DomainLayer.Domain)">
            <inheritdoc/>
        </member>
        <member name="T:Library.ServiceLayer.Services.EditionService">
            <summary>
            Class EditionService.
            Implements the <see cref="!:Library.ServiceLayer.Services.BaseService&lt;Edition, IEditionRepository&gt;" />
            Implements the <see cref="T:Library.ServiceLayer.IServices.IEditionService" />.
            </summary>
            <seealso cref="!:Library.ServiceLayer.Services.BaseService&lt;Edition, IEditionRepository&gt;" />
            <seealso cref="T:Library.ServiceLayer.IServices.IEditionService" />
        </member>
        <member name="M:Library.ServiceLayer.Services.EditionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.ServiceLayer.Services.EditionService" /> class.
            </summary>
        </member>
        <member name="T:Library.ServiceLayer.Services.LibrarianService">
            <summary>
            Class LibrarianService.
            Implements the <see cref="!:Library.ServiceLayer.Services.BaseService&lt;Library.DomainLayer.Person.Librarian, ILibrarianRepository&gt;" />
            Implements the <see cref="T:Library.ServiceLayer.IServices.ILibrarianService" />.
            </summary>
            <seealso cref="!:Library.ServiceLayer.Services.BaseService&lt;Library.DomainLayer.Person.Librarian, ILibrarianRepository&gt;" />
            <seealso cref="T:Library.ServiceLayer.IServices.ILibrarianService" />
        </member>
        <member name="M:Library.ServiceLayer.Services.LibrarianService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.ServiceLayer.Services.LibrarianService" /> class.
            </summary>
        </member>
        <member name="T:Library.ServiceLayer.Services.PropertiesService">
            <summary>
            Class PropertiesService.
            Implements the <see cref="T:Library.ServiceLayer.IServices.IPropertiesService" />.
            </summary>
            <seealso cref="T:Library.ServiceLayer.IServices.IPropertiesService" />
        </member>
        <member name="F:Library.ServiceLayer.Services.PropertiesService.validator">
            <summary>
            The validator.
            </summary>
        </member>
        <member name="F:Library.ServiceLayer.Services.PropertiesService.repository">
            <summary>
            The repository.
            </summary>
        </member>
        <member name="M:Library.ServiceLayer.Services.PropertiesService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Library.ServiceLayer.Services.PropertiesService" /> class.
            </summary>
        </member>
        <member name="M:Library.ServiceLayer.Services.PropertiesService.DeleteAll">
            <summary>
            Deletes all.
            </summary>
            <param name="entity">The entity.</param>
            <returns> ceva. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.PropertiesService.DeleteById(System.Object)">
            <summary>
            Deletes the by identifier.
            </summary>
            <param name="entity">The entity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.PropertiesService.GetAll(System.Linq.Expressions.Expression{System.Func{Library.DomainLayer.Properties,System.Boolean}},System.Func{System.Linq.IQueryable{Library.DomainLayer.Properties},System.Linq.IOrderedQueryable{Library.DomainLayer.Properties}},System.String)">
            <summary>
            Gets all.
            </summary>
            /// <param name="filter"> The filter. </param>
            <param name="orderBy"> The order by. </param>
            <param name="includeProperties"> The include properties. </param>
            <returns> ceva. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.PropertiesService.GetByID(System.Object)">
            <summary>
            Gets the by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns> ceva. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.PropertiesService.Insert(Library.DomainLayer.Properties)">
            <summary>
            Inserts the specified entity.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> ceva. </returns>
        </member>
        <member name="M:Library.ServiceLayer.Services.PropertiesService.Update(Library.DomainLayer.Properties)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity"> The entity. </param>
            <returns> ceva. </returns>
        </member>
        <member name="T:Library.ServiceLayer.Utils">
            <summary>
            Class Utils.
            </summary>
        </member>
        <member name="F:Library.ServiceLayer.Utils.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Library.ServiceLayer.Utils.LogErrors(FluentValidation.Results.ValidationResult)">
            <summary>
            Logs the errors.
            </summary>
            <param name="results">The results.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:LibraryProject.Migrations.InitialMigration">
            <summary>
            Initial Migration class.
            </summary>
        </member>
        <member name="M:LibraryProject.Migrations.InitialMigration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc/>
        </member>
        <member name="M:LibraryProject.Migrations.InitialMigration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc/>
        </member>
    </members>
</doc>
