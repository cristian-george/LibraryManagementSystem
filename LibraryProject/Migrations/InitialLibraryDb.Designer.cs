// <auto-generated />
using System;
using Library.DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240913192345_InitialLibraryDb")]
    partial class InitialLibraryDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BooksAuthors", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BooksAuthors", (string)null);
                });

            modelBuilder.Entity("BooksDomains", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("DomainId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "DomainId");

                    b.HasIndex("DomainId");

                    b.ToTable("BooksDomains", (string)null);
                });

            modelBuilder.Entity("BorrowsStocks", b =>
                {
                    b.Property<int>("BorrowId")
                        .HasColumnType("int");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("BorrowId", "StockId");

                    b.HasIndex("StockId");

                    b.ToTable("BorrowsStocks", (string)null);
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Borrow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LibrarianId")
                        .HasColumnType("int");

                    b.Property<int>("ReaderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LibrarianId");

                    b.HasIndex("ReaderId");

                    b.ToTable("Borrows");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentDomainId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentDomainId");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("BookType")
                        .HasColumnType("int");

                    b.Property<int>("EditionNumber")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("Editions");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Properties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("C")
                        .HasColumnType("int");

                    b.Property<int>("D")
                        .HasColumnType("int");

                    b.Property<int>("Delta")
                        .HasColumnType("int")
                        .HasColumnName("DELTA");

                    b.Property<int>("Domenii")
                        .HasColumnType("int")
                        .HasColumnName("DOMENII");

                    b.Property<int>("L")
                        .HasColumnType("int");

                    b.Property<int>("Lim")
                        .HasColumnType("int")
                        .HasColumnName("LIM");

                    b.Property<int>("Ncz")
                        .HasColumnType("int")
                        .HasColumnName("NCZ");

                    b.Property<int>("Nmc")
                        .HasColumnType("int")
                        .HasColumnName("NMC");

                    b.Property<int>("Per")
                        .HasColumnType("int")
                        .HasColumnName("PER");

                    b.Property<int>("Persimp")
                        .HasColumnType("int")
                        .HasColumnName("PERSIMP");

                    b.HasKey("Id");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EditionId")
                        .HasColumnType("int");

                    b.Property<int>("InitialStock")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBooksForBorrowing")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBooksForLectureOnly")
                        .HasColumnType("int");

                    b.Property<DateTime>("SupplyDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EditionId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BooksAuthors", b =>
                {
                    b.HasOne("Library.DomainLayer.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Authors_BooksAuthors_AuthorId");

                    b.HasOne("Library.DomainLayer.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Books_BooksAuthors_BookId");
                });

            modelBuilder.Entity("BooksDomains", b =>
                {
                    b.HasOne("Library.DomainLayer.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Books_BooksDomains_BookId");

                    b.HasOne("Library.DomainLayer.Models.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Domains_BooksDomains_DomainId");
                });

            modelBuilder.Entity("BorrowsStocks", b =>
                {
                    b.HasOne("Library.DomainLayer.Models.Borrow", null)
                        .WithMany()
                        .HasForeignKey("BorrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Borrows_BorrowsStocks_BorrowId");

                    b.HasOne("Library.DomainLayer.Models.Stock", null)
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Borrows_BorrowsStocks_StockId");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Borrow", b =>
                {
                    b.HasOne("Library.DomainLayer.Models.User", "Librarian")
                        .WithMany("LibrarianBorrows")
                        .HasForeignKey("LibrarianId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Borrows_LibrarianId");

                    b.HasOne("Library.DomainLayer.Models.User", "Reader")
                        .WithMany("ReaderBorrows")
                        .HasForeignKey("ReaderId")
                        .IsRequired()
                        .HasConstraintName("FK_Users_Borrows_ReaderId");

                    b.Navigation("Librarian");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Domain", b =>
                {
                    b.HasOne("Library.DomainLayer.Models.Domain", "ParentDomain")
                        .WithMany("ChildDomains")
                        .HasForeignKey("ParentDomainId");

                    b.Navigation("ParentDomain");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Edition", b =>
                {
                    b.HasOne("Library.DomainLayer.Models.Book", "Book")
                        .WithMany("Editions")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Books_Editions_BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Stock", b =>
                {
                    b.HasOne("Library.DomainLayer.Models.Edition", "Edition")
                        .WithMany("Stocks")
                        .HasForeignKey("EditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Editions_Stocks_EditionId");

                    b.Navigation("Edition");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Book", b =>
                {
                    b.Navigation("Editions");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Domain", b =>
                {
                    b.Navigation("ChildDomains");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.Edition", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Library.DomainLayer.Models.User", b =>
                {
                    b.Navigation("LibrarianBorrows");

                    b.Navigation("ReaderBorrows");
                });
#pragma warning restore 612, 618
        }
    }
}
